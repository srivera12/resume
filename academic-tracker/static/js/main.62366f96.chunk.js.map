{"version":3,"sources":["contexts/customizationContext.js","contexts/subjectContext.js","hooks/useInputState.js","Customizer.js","TrackerDialog.js","NavBar.js","Subject.js","SubjectList.js","TrackerForm.js","Tracker.js","App.js","index.js"],"names":["CustomizationContext","createContext","CustomizationProvider","props","initialBackground","JSON","parse","window","localStorage","getItem","type","color","image","useState","background","setBackground","Provider","value","children","SubjectContext","SubjectProvider","initialSubjects","subjects","setSubjects","addSubject","subject","decrementAssignments","id","updatedSubjects","map","assignmentsLeft","resetSubjects","location","reload","completeCelebration","hasCelebrated","useInputState","initialVal","setValue","isPristine","setIsPristine","e","target","Customizer","setDialogType","useContext","handleChange","onChangeComplete","event","hex","DialogContent","DialogContentText","TextField","className","label","onChange","fullWidth","autoFocus","Button","variant","onClick","TrackerDialog","dialogType","madeSelection","setMadeSelection","selectCustomization","Dialog","onClose","open","DialogTitle","List","ListItem","NavBar","AppBar","position","Toolbar","Typography","disabled","length","Subject","name","celebrate","useCallback","confetti","particleCount","spread","useEffect","ListItemText","ListItemSecondaryAction","SubjectList","assignments","uuid","TrackerForm","setShowAddForm","newSubject","setNewSubject","reset","isEmpty","isNotNumber","isNaN","parseInt","onSubmit","preventDefault","error","Tracker","showAddForm","incompleteSubjects","filter","setItem","stringify","emojisplosions","Paper","style","backgroundColor","backgroundImage","Grid","container","justifyContent","item","xs","md","lg","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.62366f96.chunk.js","sourcesContent":["import React, { createContext, useState } from 'react';\n\nexport const CustomizationContext = createContext();\n\nexport function CustomizationProvider(props) {\n  // checking local storage, as well as establishing basic/starting style options\n  const initialBackground = JSON.parse(window.localStorage.getItem('background')) || {\n    type: 'color',\n    color: 'white',\n    image: null,\n  };\n\n  //   creating stateful variable\n  const [background, setBackground] = useState(initialBackground);\n\n  return (\n    <CustomizationContext.Provider value={{ background, setBackground }}>\n      {props.children}\n    </CustomizationContext.Provider>\n  );\n}\n","import React, { createContext, useState } from 'react';\n\nexport const SubjectContext = createContext();\n\nexport function SubjectProvider(props) {\n  // checking local storage\n  const initialSubjects = JSON.parse(window.localStorage.getItem('subjects')) || [];\n\n  // creating stateful variable\n  const [subjects, setSubjects] = useState(initialSubjects);\n\n  const addSubject = (subject) => {\n    setSubjects([...subjects, subject]);\n  };\n\n  const decrementAssignments = (id) => {\n    const updatedSubjects = subjects.map((subject) =>\n      subject.id === id ? { ...subject, assignmentsLeft: subject.assignmentsLeft - 1 } : subject\n    );\n    setSubjects(updatedSubjects);\n  };\n\n  const resetSubjects = () => {\n    setSubjects([]);\n    window.location.reload();\n  };\n\n  // marks that a subject as been \"celebrated\" so the confetti only happens once\n  const completeCelebration = (id) => {\n    const updatedSubjects = subjects.map((subject) =>\n      subject.id === id ? { ...subject, hasCelebrated: true } : subject\n    );\n    setSubjects(updatedSubjects);\n  };\n\n  return (\n    <SubjectContext.Provider value={{ subjects, addSubject, decrementAssignments, resetSubjects, completeCelebration }}>\n      {props.children}\n    </SubjectContext.Provider>\n  );\n}\n","import { useState } from 'react';\n\nconst useInputState = (initialVal) => {\n  const [value, setValue] = useState(initialVal);\n  const [isPristine, setIsPristine] = useState(true);\n  const handleChange = (e) => {\n    setValue(e.target.value);\n    setIsPristine(false);\n  };\n  const reset = () => {\n    setValue('');\n    setIsPristine(true);\n  };\n  return [value, handleChange, reset, isPristine];\n};\n\nexport default useInputState;\n","import { Button, DialogContent, DialogContentText, TextField } from '@mui/material';\nimport React, { useContext } from 'react';\nimport { SwatchesPicker } from 'react-color';\nimport { CustomizationContext } from './contexts/customizationContext';\nimport useInputState from './hooks/useInputState';\nimport './styles/Customizer.css';\n\nexport function Customizer({ setDialogType }) {\n  // stateful variables\n  const { background, setBackground } = useContext(CustomizationContext);\n  const [value, handleChange] = useInputState('');\n\n  //  setDialogType below \"closes\" the Dialog\n  const changeBackgroundColor = (color, event) => {\n    setBackground({ ...background, color: color.hex });\n    setDialogType('');\n  };\n  const changeBackgroundImage = () => {\n    setBackground({ ...background, image: value });\n    setDialogType('');\n  };\n\n  return (\n    <>\n      {/* renders either color selector or image selector */}\n      {background.type === 'color' ? (\n        <SwatchesPicker onChangeComplete={changeBackgroundColor} />\n      ) : (\n        <DialogContent>\n          <DialogContentText>You can add any background image by entering the image URL below:</DialogContentText>\n          <TextField\n            className=\"text-field\"\n            label=\"Image URL\"\n            value={value}\n            onChange={handleChange}\n            fullWidth\n            autoFocus\n          />\n          <Button variant=\"contained\" color=\"secondary\" onClick={changeBackgroundImage}>\n            Change Background Image\n          </Button>\n        </DialogContent>\n      )}\n    </>\n  );\n}\n","import { Button, Dialog, DialogContent, DialogContentText, DialogTitle, List, ListItem } from '@mui/material';\nimport React, { useContext, useState } from 'react';\nimport { CustomizationContext } from './contexts/customizationContext';\nimport { SubjectContext } from './contexts/subjectContext';\nimport { Customizer } from './Customizer';\nimport './styles/TrackerDialog.css';\n\nexport function TrackerDialog({ dialogType, setDialogType }) {\n  // stateful variables\n  const { resetSubjects } = useContext(SubjectContext);\n  const { background, setBackground } = useContext(CustomizationContext);\n  //   used to move from choice between color and image and actually selecting those options\n  const [madeSelection, setMadeSelection] = useState(false);\n\n  const selectCustomization = (type) => {\n    setBackground({ ...background, type: type });\n    setMadeSelection(true);\n  };\n  const resetAndClose = () => {\n    resetSubjects();\n    setDialogType('');\n  };\n\n  return (\n    <>\n      {dialogType === 'customize' ? (\n        <Dialog\n          onClose={() => {\n            setDialogType('');\n          }}\n          open={dialogType === 'customize'}\n        >\n          {!madeSelection ? (\n            <>\n              <DialogTitle>What would you like to customize? </DialogTitle>\n              <DialogContent>\n                <List>\n                  <ListItem>\n                    <Button\n                      variant=\"contained\"\n                      color=\"secondary\"\n                      onClick={() => {\n                        selectCustomization('color');\n                      }}\n                    >\n                      Background Color\n                    </Button>\n                  </ListItem>\n                  <ListItem>\n                    <Button\n                      variant=\"contained\"\n                      color=\"secondary\"\n                      onClick={() => {\n                        selectCustomization('image');\n                      }}\n                    >\n                      Background Image\n                    </Button>\n                  </ListItem>\n                </List>\n              </DialogContent>{' '}\n            </>\n          ) : (\n            <Customizer setDialogType={setDialogType} />\n          )}\n        </Dialog>\n      ) : (\n        <Dialog\n          onClose={() => {\n            setDialogType('');\n          }}\n          open={dialogType === 'delete'}\n        >\n          <DialogTitle>Are you sure you want to reset?</DialogTitle>\n          <DialogContent>\n            <DialogContentText className=\"dialog-content-text\">This action cannot be undone.</DialogContentText>\n            <Button variant=\"contained\" color=\"secondary\" onClick={resetAndClose}>\n              Yes, reset\n            </Button>\n            <Button\n              className=\"TrackerDialog-button\"\n              variant=\"contained\"\n              color=\"error\"\n              onClick={() => {\n                setDialogType('');\n              }}\n            >\n              No, cancel\n            </Button>\n          </DialogContent>\n        </Dialog>\n      )}\n    </>\n  );\n}\n","import { AppBar, Button, Toolbar, Typography } from '@mui/material';\nimport React, { useContext, useState } from 'react';\nimport { SubjectContext } from './contexts/subjectContext';\nimport './styles/NavBar.css';\nimport { TrackerDialog } from './TrackerDialog';\n\nexport function NavBar() {\n  // stateful variables\n  const { subjects } = useContext(SubjectContext);\n  //   used to swtich between customize and delete dialogs\n  const [dialogType, setDialogType] = useState('');\n\n  return (\n    <AppBar color=\"secondary\" position=\"static\" className=\"appbar\">\n      <Toolbar>\n        <Typography color=\"inherit\">Academic Tracker</Typography>\n        <Button\n          className=\"NavBar-button\"\n          onClick={() => {\n            setDialogType('customize');\n          }}\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          Customize\n        </Button>\n        <Button\n          className=\"NavBar-button\"\n          onClick={() => {\n            setDialogType('delete');\n          }}\n          variant=\"contained\"\n          color=\"error\"\n          disabled={subjects.length === 0}\n        >\n          RESET\n        </Button>\n        {dialogType !== '' ? <TrackerDialog dialogType={dialogType} setDialogType={setDialogType} /> : null}\n      </Toolbar>\n    </AppBar>\n  );\n}\n","import { Button, ListItem, ListItemSecondaryAction, ListItemText } from '@mui/material';\nimport confetti from 'canvas-confetti';\nimport React, { useCallback, useContext, useEffect } from 'react';\nimport { SubjectContext } from './contexts/subjectContext';\n\nexport function Subject({ name, id, assignmentsLeft, hasCelebrated }) {\n  const { decrementAssignments, completeCelebration } = useContext(SubjectContext);\n\n  const celebrate = useCallback(() => {\n    confetti({\n      particleCount: 150,\n      spread: 60,\n    });\n  }, []);\n\n  // checking for completion of all subjects, as well as making sure the confetti celebration only happens once\n  useEffect(() => {\n    if (assignmentsLeft === 0 && !hasCelebrated) {\n      celebrate();\n      completeCelebration(id);\n    }\n  }, [assignmentsLeft, celebrate, completeCelebration, hasCelebrated, id]);\n\n  return (\n    <ListItem>\n      {assignmentsLeft !== 0 ? (\n        <>\n          <ListItemText>{name}</ListItemText>\n          <ListItemSecondaryAction>\n            <Button\n              variant=\"contained\"\n              onClick={() => {\n                decrementAssignments(id);\n              }}\n            >\n              {assignmentsLeft} Left!\n            </Button>\n          </ListItemSecondaryAction>\n        </>\n      ) : (\n        <ListItemText>{name} is Complete. Great job!</ListItemText>\n      )}\n    </ListItem>\n  );\n}\n","import { List } from '@mui/material';\nimport React, { useContext } from 'react';\nimport uuid from 'uuid/dist/v4';\nimport { SubjectContext } from './contexts/subjectContext';\nimport { Subject } from './Subject';\n\nexport function SubjectList() {\n  const { subjects } = useContext(SubjectContext);\n\n  return (\n    <List>\n      {subjects.map((subject) => (\n        <Subject\n          key={uuid()}\n          name={subject.name}\n          id={subject.id}\n          assignments={subject.assignments}\n          assignmentsLeft={subject.assignmentsLeft}\n          hasCelebrated={subject.hasCelebrated}\n        />\n      ))}\n    </List>\n  );\n}\n","import { Button, TextField, Typography } from '@mui/material';\nimport React, { useContext, useState } from 'react';\nimport uuid from 'uuid/dist/v4';\nimport { SubjectContext } from './contexts/subjectContext';\nimport useInputState from './hooks/useInputState';\nimport './styles/TrackerForm.css';\n\nexport function TrackerForm({ setShowAddForm }) {\n  // stateful variables\n  const { addSubject } = useContext(SubjectContext);\n  const [newSubject, setNewSubject] = useState({});\n  const [value, handleChange, reset, isPristine] = useInputState('');\n\n  // validators\n  const isEmpty = value === '' && !isPristine;\n  const isNotNumber = value !== '' && isNaN(parseInt(value));\n\n  const subjectNameSubmit = (e) => {\n    e.preventDefault();\n    setNewSubject({ ...newSubject, name: value, id: uuid() });\n    reset();\n  };\n  const subjectAssignmentsSubmit = (e) => {\n    e.preventDefault();\n    setNewSubject({\n      ...newSubject,\n      assignments: parseInt(value),\n      assignmentsLeft: parseInt(value),\n      hasCelebrated: false,\n    });\n    reset();\n  };\n  // adds subject to state and closes form\n  const addFullClass = () => {\n    addSubject(newSubject);\n    setShowAddForm(false);\n  };\n\n  return (\n    <>\n      {/* renders different forms based on what info is already known */}\n      {!newSubject.name ? (\n        <form onSubmit={subjectNameSubmit}>\n          <TextField\n            label={isEmpty ? 'Class must have a name.' : 'Class Name'}\n            value={value}\n            onChange={handleChange}\n            fullWidth\n            autoFocus\n            error={isEmpty}\n          />\n          <Button className=\"TrackerForm-button\" type=\"submit\" variant=\"contained\" disabled={isEmpty}>\n            Add Class\n          </Button>\n        </form>\n      ) : null}\n      {newSubject.name && !newSubject.assignments ? (\n        <form onSubmit={subjectAssignmentsSubmit}>\n          <TextField\n            label={\n              isNotNumber || isEmpty ? 'You must enter a number here.' : `Number of Assignments for ${newSubject.name}`\n            }\n            value={value}\n            onChange={handleChange}\n            fullWidth\n            autoFocus\n            error={isNotNumber || isEmpty}\n          />\n          <Button className=\"TrackerForm-button\" type=\"submit\" variant=\"contained\" disabled={isNotNumber || isEmpty}>\n            Add Assignments\n          </Button>\n        </form>\n      ) : null}\n      {newSubject.name && newSubject.assignments ? (\n        <>\n          <Typography className=\"typography\">\n            Add a class named {newSubject.name} with {newSubject.assignments} assignments?\n          </Typography>\n          <Button className=\"TrackerForm-button\" onClick={addFullClass} variant=\"contained\" color=\"secondary\">\n            Finish Adding Class\n          </Button>\n          <Button\n            className=\"TrackerForm-button\"\n            onClick={() => {\n              setNewSubject({});\n              setShowAddForm(false);\n            }}\n            variant=\"contained\"\n            color=\"error\"\n          >\n            No, Cancel\n          </Button>\n        </>\n      ) : null}\n    </>\n  );\n}\n","import { Button, Grid, Paper, Typography } from '@mui/material';\nimport { emojisplosions } from 'emojisplosion';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { CustomizationContext } from './contexts/customizationContext';\nimport { SubjectContext } from './contexts/subjectContext';\nimport { NavBar } from './NavBar';\nimport './styles/Tracker.css';\nimport { SubjectList } from './SubjectList';\nimport { TrackerForm } from './TrackerForm';\n\nexport function Tracker() {\n  // stateful variables\n  const { subjects } = useContext(SubjectContext);\n  const { background } = useContext(CustomizationContext);\n  const [showAddForm, setShowAddForm] = useState(false);\n  // this variable needs to be outside useEffect() so that it can be used below\n  const incompleteSubjects = subjects.filter((subject) => subject.assignmentsLeft !== 0);\n\n  useEffect(() => {\n    // saving subject list and background customizations in local storage\n    window.localStorage.setItem('subjects', JSON.stringify(subjects));\n    window.localStorage.setItem('background', JSON.stringify(background));\n    // determining completion of list\n    if (subjects.length !== 0 && incompleteSubjects.length === 0) {\n      emojisplosions();\n    }\n  }, [subjects, incompleteSubjects.length, background]);\n\n  return (\n    <>\n      <Paper\n        className=\"paper\"\n        style={{\n          // dynamically styles background, and switches between color or image choices\n          backgroundColor: background.type === 'color' ? background.color : 'transparent',\n          backgroundImage: background.type === 'image' ? `url(${background.image})` : null,\n        }}\n      >\n        <NavBar />\n        <Grid container justifyContent=\"center\" className=\"grid-container\">\n          <Grid item xs={11} md={8} lg={6} className=\"grid-item\">\n            {/* no subjects state */}\n            {subjects.length === 0 ? (\n              <Typography variant=\"h4\">Use the button below to start adding classes. Have a great week!</Typography>\n            ) : null}\n            {/* list completed or not */}\n            {subjects.length !== 0 && incompleteSubjects.length === 0 ? (\n              <Typography variant=\"h3\">YOU FINISHED EVERYTHING FOR THIS WEEK! FANTASTIC JOB!</Typography>\n            ) : (\n              <SubjectList />\n            )}\n            {/* adding classes or not */}\n            {showAddForm ? (\n              <TrackerForm setShowAddForm={setShowAddForm} />\n            ) : (\n              <Button\n                className=\"Tracker-button\"\n                onClick={() => {\n                  setShowAddForm(true);\n                }}\n                variant=\"contained\"\n                color=\"secondary\"\n                disabled={subjects.length !== 0 && incompleteSubjects.length === 0}\n              >\n                Add A Class!!\n              </Button>\n            )}\n          </Grid>\n        </Grid>\n      </Paper>\n    </>\n  );\n}\n","import { CustomizationProvider } from './contexts/customizationContext';\nimport { SubjectProvider } from './contexts/subjectContext';\nimport { Tracker } from './Tracker';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CustomizationProvider>\n        <SubjectProvider>\n          <Tracker />\n        </SubjectProvider>\n      </CustomizationProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles/index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}